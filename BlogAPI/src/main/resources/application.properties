server.port=8080
#--------------------------------------------------------#
spring.application.name=BlogAPI
server.error.include-message=always
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=false

spring.datasource.initialization-mode=always

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# === PostgreSQL Configuration ===
# spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
# spring.datasource.username=${POSTGRES_USER}
# spring.datasource.password=${POSTGRES_PASSWORD}
# spring.datasource.driver-class-name=org.postgresql.Driver

# === File Upload Limits ===
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=10MB

# === Static Resources ===
# You can store uploaded images in a folder and serve them from here
spring.web.resources.static-locations=classpath:/static/,file:uploads/

# === Logging ===
logging.level.org.springframework=INFO
logging.level.com.example=DEBUG
logging.level.com.example.BlogAPI=TRACE
logging.level.org.springframework.security=DEBUG

# === Security (JWT secrets etc.) ===
app.jwt.secret=${JWT_SECRET}

# openssl rand -base64 64 | tr -d '\n' > JWT_SECRET

app.jwt.expiration-ms=86400000 # 24 hours in milliseconds

# === Custom Properties (optional) ===
app.upload.dir=uploads

spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always

spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

spring.sql.init.schema-locations=classpath:schema.sql
spring.sql.init.data-locations=classpath:data.sql